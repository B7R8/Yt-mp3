version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: yt-mp3-redis
    # ports:
    #   - "6379:6379" # Ma m7tajinch n'exposewh ila ghir l'backend li kayhder m3ah
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 2gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    deploy:
      resources:
      limits:
      cpus: '0.5'
      memory: 2.5G
      reservations:
        cpus: '0.25'
        memory: 1G

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    # L'ports T7EYYDAT: Hada howa ahem correction. Daba replicas: 2 ghadi tkhdem
    # ports:
    #   - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAX_WORKERS=8
      - MAX_CONCURRENT_JOBS=20
      - MAX_CACHE_SIZE=1000
      - CACHE_TTL=3600000
      - DOWNLOADS_DIR=/app/downloads
      - CACHE_DIR=/app/cache
      - TEMP_DIR=/app/temp
      - MAX_FILE_AGE_HOURS=24
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=20
      - LOG_LEVEL=info
      - ENABLE_METRICS=true
      # Security settings
      - DISABLE_SOURCE_MAPS=true
      - HIDE_SERVER_INFO=true
      - SECURE_HEADERS=true
    volumes:
      - ./downloads:/app/downloads
      - ./cache:/app/cache
      - ./temp:/app/temp
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    # container_name T7EYYDAT: A7ssan nkhlliw Docker ysmmih
    # L'ports T7EYYDAT: Nginx howa li khasso ywelli l'bawwaba l'wa7ida
    # ports:
    #   - "3000:80"
    environment:
      # Security settings
      - NODE_ENV=production
      - DISABLE_SOURCE_MAPS=true
      - SECURE_HEADERS=true
    restart: unless-stopped
    # depends_on backend ma mohimch hna 7it Nginx howa li kay'dependi 3lihom bjouj
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: yt-mp3-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"] # A7ssan healthcheck l Nginx howa nchoufo l'config s7i7a
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: yt-mp3-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  redis_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
    config:
    - subnet: 172.20.0.0/24